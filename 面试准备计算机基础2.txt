写下来吧

竞态条件：两个线程竞争同一资源，对资源的访问顺序敏感，这样一种情形就是竞态条件，发生竞态条件的代码区域被称为临界区。

尽量简单点说，造成死锁的四个条件：
1、互斥
2、请求并持有
3、非剥夺
4、循环等待

线程通信方式：
1、共享变量
2、wait/notify、notifyAll 注意这个是在同步块中使用，必须获取锁。

机制：
1、threadlocal 用来保存线程独享的数据
2、fork/join 用于大任务的分割与汇总。fork创建子线程，join等待线程执行完成。里面应该是用的locksupport的什么方法来着。
而且有一个forkjoinpoll线程池。核心思想是分而治之。
3、volatile 用于保证变量的可见性
4、interupt

线程池 一共有5种线程池
1、使用场景
2、原理与实现方式
3、线程池实现

线程的状态转换：
1、new
2、runnable
3、wait
4、timewait
5、block
3、terminated

这里面有好多注意点
第一个是block 虽然不是必须的顺序 但可以先说这个
进入同步块、同步方法失败会进入block状态
获取到锁了 回到runnable状态：注意runnable分为ready、running 等待线程调度。或者yield放弃cpu资源。

wait调用obj的wait方法
locksupport的park方法
调用thread的join方法

timewait的话也是类似上面三个。但是多了一个thread的sleep。反正我也是有点作死，这个特殊的时候，但是我也不能再轻易做决定了。无语。

obj的notify notifyall、locksupport的unpark这是成对出现的注意。

线程的同步与互斥，大体上了解了。同步保证资源的访问顺序。互斥就是统一资源只能被一个线程访问。

实现线程同步与互斥的方式有CAS、syncorized、lock。乐观锁，就是认为并发访问不总是发生，如果发生了一般会进入自旋直到操作成功。
CAS 是一种轻量级锁。current包下好多工具类都是采用cas实现的。注意联想啊。。。擦知识是关联的啊。
比较并写回。比较旧值是否修改，若未被其他线程修改，则写回。否则重新执行读取流程。
这里好多自己的描述不是很准确，真的很无语。乐观策略。认为并发操作并不总是发生。
不是cpu指令。是操作系统原语，操作中不允许中断。
synchronize的实现原理：
继续写 抓紧弄完这个。
synchronize是对对象加锁。所以对象要保存锁的信息，譬如：哪个线程加的锁。
是如何保证只有一个线程进入临界区。
对象在内存中分为3个区域：对象头、实例数据、对齐填充。
现在出现的问题是，我虽然看过很多东西。很多知识。但是知识连不起来。擦
对象头中保存了锁标志位和指向monitor对象的起始地址。一个对象对应的monitor对象。
当monitor对象被某个线程占用，monitor对象处于锁定状态。owner难道不是指向的持有monitor对象的线程？。
synchronize作用在方法时，在字节码中是通过acc_synchronize实现的。
作用在同步块上时，在字节码中是通过monitorenter、monitorexit实现的。
针对synchronize获取锁的方式，
我擦 完全解释错误。无语看着很简单，但是真正描述出来真的很费劲。
完全解释错误。我擦 问题很严重。

因为你不能把某些东西描述清楚，所以导致了很多问题。从来没有注意过这个。应该算是找到原因了。好无语。。。
这就是原因啊。
再来试试：
现在感觉存在语言障碍。改变下吧。事情一定要表述清楚。。。
为了提高程序的执行效率，虚拟机团队一直在对锁进行优化，都是为了解决锁竞争问题。互斥同步对性能最大的影响是阻塞，线程的挂起和恢复的操作都需要转到内核态完成。


采用锁升级的优化措施。偏向锁 →轻量级锁→自旋锁 （不放弃cpu资源，防止切换到内核态等） 
再升级为重量级锁。
我突然找到原因了
可能也是没有自信的表现了。
偏向锁、轻量级锁的实现方式都是类似在对象头中保存线程的id或者在栈帧中建立锁的记录，对象头中的markword指向锁记录。

AQS与lock
这是要采用连猜带蒙的形式吗？???
突然有些东西变得清晰起来

线程池适用场景
一共有5个线程池
newfixedthreadpool:固定大小的线程池，适合资源紧张的情况。
cachedthreadpool：适合执行大量耗时短的任务的情形
singlethreadpool   适合单线程的
schedulethreadpool  可调度的线程

天啊 真是无语
首先应该说重点 上面答的是些什么呀

哦 突然又明白了点什么 有些东西需要自己推断出来 开始写吧 那个不去了 什么也没说

开始弄需要加快时间
newfixedthreadpool 固定线程数目。无界队列。适用于任务数量不均匀的情况。对内存压力不敏感，但是对系统比较敏感的场景。
newcachedthreadpool：无限线程数，适合低延迟的短期任务的场景。
newsinglethreadexecutor：单个线程的固定线程池。无界队列。适用于保证异步任务执行顺序的场景。
newscheduledthreadpool。适用于定期执行任务的场景，支持固定频率和固定延迟。都是executorservice。
newWorkstealingPool:工作窃取线程池。使用forkjoinpool。多任务执行的固定并行度。适合任务执行时长不均匀的情形。

threadpoolexecutor的参数说明：
collsize核心线程数数量，默认情况核心线程数会一直存活。 我觉得这个应该是任务队列没满时，线程的数量。
maximumPoolsize最大线程数数量，允许创建的最大线程数。
第四个参数。设置空闲时间及空闲时间单位。如果线程的空闲时间超过这个数，就回被销毁。有个方法可以设置核心线程被回收。
缓冲队列。
arrayblockqueue。是一个有界队列，有最大容量限制。
linkedblockingqueue。是一个无界队列。没有。
synchronsequeue不缓存数据的队列。
threadfactory设置
感觉阅读源码时还是有很多障碍。。。哎 必须理解思想然后再来阅读。。。
第七个参数是拒绝策略。

多线程这个还需要继续看 继续先看缓存的吧。然后再看spring的。看下linux的命令。的

线程真的是好多没有用到。
还需要继续看。
动态排行榜
sorted set
简单写下吧：
最大的区别就是：redis不仅仅可以存储在内存中。
支持的数据类型不一样。
mc是多线程的 redis是单线程的
redis支持持久化
每种数据类型的应用场景：
https://segmentfault.com/a/1190000012212663
string：保存json字符串
list：消息队列、最新内容
set：共同好友 可以进行集合操作
sorted set：有序集合。新密度或者排行榜。
每个元素都关联一个分数。
aof、rdb
redis的过期机制及淘汰策略：
定时删除
惰性删除 每次get的时候判断有没有过期，需要设置过期时间。
然后就是配置淘汰策略：一般会设置最近最少使用的淘汰策略。
高并发：水平扩展

redis分布式锁：setnx。redlock。
https://wudashan.cn/2017/10/23/Redis-Distributed-Lock-Implement/

这个自己实践的时候 还需要继续看
