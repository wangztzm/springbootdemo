计算机基础知识
TCP
设计模式
java语言基础


1、进程与线程部分
https://www.cnblogs.com/dreamroute/p/5207813.html
http://www.sohu.com/a/237171690_465221

区别和联系：
对操作系统来说，进程是系统资源分配的最小单位。
线程是是程序执行的最小单位。进程使用独立的数据空间。线程共享进程的数据空间。
可以通过加锁的方式防止多个线程同时读写某一块内存区域。互斥锁。某些内存区域，只能供给固定数目的线程使用，可以使用信号量的做法实现，用来保证多个线程不会互相冲突。
每个线程有自己的栈段。

线程调度
https://www.jianshu.com/p/ecfddbc0af2d
1、时间片轮转调度 都有固定的执行时间
2、先来先服务调度 先到的先执行
3、优先级调度 队列中优先级高的先执行
4、多级反馈队列调度 时间片轮转与优先级结合的
5、高响应比优先调度 响应比越高 优先执行

线程切换步骤 线程切换的代价

协程更轻量化，是在用户态进行调度，切换的代价比线程上下文切换低。
http://www.sohu.com/a/237171690_465221


2、linux常用命令
awk: 处理文本文件 http://www.ruanyifeng.com/blog/2018/11/awk.html
awk -F ':' '{print NR ")" $1}' demo.txt
挺强大呀这个命令 之前怎么不知道啊啊啊

top：主要用于查看进程相关信息，同时也会提供cup信息和内存信息。

netstat：网络状态查看的命令。我看见有tcp连接有关的内容 譬如Recv-Q、Send
http://c.biancheng.net/view/800.html

grep：可以用来搜索文本

less：用于浏览文件内容。可以翻页。使用/文件内容，然后回车，将查找结果高亮显示。
https://jingyan.baidu.com/article/db55b609d94d414ba30a2f0d.html

tail：只显示后面几行，用于实时查看文件的内容。
https://www.jianshu.com/p/ee44fe0c5bae

网络知识
4/7层网络模型
http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html
http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html
看完这个明白了很多

每一层都是一个协议，都是为了完成一种功能。

http协议的urlencode只是针对url的编码。适合get请求，特殊字符不允许出现在url中。譬如&，所以需要编码。

应用层  规定应用程序的数据格式
表示层
会话层
传输层 建立端口到端口的通信，网络层是主机到主机的通信。Unix系统就把主机+端口，叫做"套接字"（socket）。
网络层 IP地址，使得能够区分不同的计算机是否属于同一子网络。是子网络的话发广播，不是子网络的话走路由（如何向不同的子网络分发数据包）
链接层 确定了0和1的分组方式 MAC地址 广播
物理层 物理手段连接

建立连接的三次握手
是为了建立双向连接
1、服务器处于监听端口状态。
2、客户端发送SYN请求后，处于SYN_SENT状态。
3、服务端收到SYN后，同意建立连接回复客户端ACK。由于是双工传输server端同时发送一个SYN，请求建立连接，然后server端处于SYN_RCVD。
4、客户端收到server的ACK后，客户端就变成了established状态，客户端回复server端发送的SYN请求，server端接受到ACK后，server端就变成了established状态。
连接就建立了 可以通信了。
https://blog.csdn.net/qq_25948717/article/details/80382766

其实我觉得更简单点就是这样的
三次握手目的是建立双向连接
1、发起方发起建立连接的请求
2、服务方同意连接，服务方回回应可以连接，同时服务方发起连接的请求，
3、发起方收到回应后，发起方便处于建立连接的状态。然后回应服务方的连接请求。
4、服务方收到回应后便处于连接状态。
状态依次是LISTEN SYN_SEND SYN_RCVD ESTABLISHED


tcp的特点
传输可靠 （通过序列号与确认应答提高可靠性）
因为是处于传输层，所以是端对端的连接。
双路通信。
拥塞控制。。。不太懂 可以不说（拥塞控制的算法有4种，即慢开始，拥塞避免，快重传和快恢复）
基于字节流而非报文传输的（UDP的是报文https://blog.csdn.net/ce123_zhouwei/article/details/8976006）

tcp实现细节：8种报文状态？？keepalive 滑动窗口机制 Nagle算法

SYN洪水攻击

四次挥手断连
双方都可以发起
要特别注意图中的状态是发送或接受后才会处于这种状态。
1、发起方发送FIN包，表明已经没有数据要发送了，然后发起方变为FIN_WAIT_1状态
2、服务方收到请求后，返回ACK，处于CLOSE_WAIT。服务方有数据要发送给发起方。
3、发起方收到ACK后处于FIN_WAIT_2状态。
4、服务方没有数据要发送了，发送FIN给发起方。然后处于LAST_ACK。
   发起方收到请求后，返回ACK。发起方处于 TIME_WAIT。延迟2MSL后关闭。
   服务方收到ack后处于关闭状态。
   
   总的来说就是我要关闭连接了了，对方同意了，我关闭连接。但是对方还有数据要发送，所以说你等着我发送完数据我这边再关闭。等服务方发送完数据之后说我也要关闭连接了。对方同意后，这边就关闭了。

2MSL:1、保证全双工连接可靠关闭。因为发起方有可能发送的ACK，服务方没有收到，服务方关不了。。。
      2、要保证重复的数据段从网络中消失，防止端口被重用时造成数据混淆。
	  
	  开启tcp_tw_reuser tcp_tw_recycle能加快处于time_wait状态连接的回收。
	  大量处于close_wait的是被动一方没有回应，代码可能有问题。
	  
无论是建立连接、关闭连接都是双向的。
   
之前出现的linux上的问题 其实是给的tcp的状态 closewait的话是代码有问题

spring这个工厂模式是 简单工厂模式混合和工厂方法模式


上边就先这样吧。

下面是设计模式。设计原则：开闭、单一职责
3大类型23种设计模式。
1、创建型 5种：
   工厂方法模式：
   抽象工厂模式：产品生产商
   单例模式：静态初始化、双重检查。数据库连接池、日志记录
   建造者模式：组装厂 https://www.jianshu.com/p/3d1c9ffb0a28 还有这个：https://cloud.tencent.com/developer/article/1342035
   android：new AlertDialog.Builder(this).setCancelable(true)
        .setIcon(R.mipmap.app_logo).setMessage("温馨提醒").show();

   原型模式：
2、结构型的 17种：
适配器模式：
想象ps2转usb 转接头 对对象解耦 需要适配器模式。主要解决的问题是重用已有的类，但是接口不是需要的，需要定义适配器类做转换。
譬如spring mvc dispatchservlet中的doDispatch方法中的HandlerAdapter
装饰器模式：跟代理模式很像
https://www.cnblogs.com/pqq-bk/p/6958168.html
　从两种模式的代码可以看出：装饰模式是把要装饰的对象（ConcreteComponent）当作参数传入，而且被装饰的对象是动态的；这也是和代理模式的区别，代理模式本身持有这个对象，不需要从外部传入；
  功能上代理模式注重的是隔离限制，让外部不能访问你实际的调用对象，比如权限控制，装饰模式注重的是功能的拓展，在同一个方法下实现更多的功能。
代理模式：
https://www.cnblogs.com/akaneblog/p/6720513.html
静态代理类是编译时就已经创建了代理类。
java中动态代理主要有JDK和CGLIB两种方式。jvm运行时动态创建的代理类。
区别主要是jdk是代理接口，而cglib是代理类。
外观模式：
桥接模式：
组合模式：
享元模式：
3、行为型的 11种：
策略：shiro里好像用的这种。我感觉非常像工厂方法。但是是面向行为的，而工厂方法是针对对象创建的。
应用
comparator
环境(Context)角色：采用了匿名类的方式，来存放实现了comparator的类
具体策略(ConcreteStrategy)角色：Collections作为封装了排序算法的包装类
抽象策略(Strategy)角色：comparator接口
comparatorList(),comparatorArray()方法则模拟了一个外部调用
模板方法：springbean的创建过程好像是这个。定义创建过程的。
https://blog.csdn.net/zhousenshan/article/details/82932534
shiro的认证流程等。定义了骨架（调用哪些方法及顺序），某些特定方法由子类实现。
观察者模式
迭代子模式
责任链模式：过滤器。当时以为是循环执行过滤器就完了。其实不是这样的。感觉有点嵌套执行的意思。
命令模式
备忘录模式
状态模式
访问者模式
中介者模式
解释器模式

差不多了 继续下一个

在这里特别注意一点 成员变量是有用的啊
标志状态什么的非常有用


类锁、对象锁。类锁是针对静态方法的。两种锁不一样。初步估计是因为锁的内存区域不一样。
锁的本质难道还是因为对象的内存？？？
线程安全是多个线程操作一个对象的结果。。
ReentrantLock ok 也是一个成员变量。
希望能够描述的更加简单明确。

工厂方法好像突然明白了 看这篇
https://www.cnblogs.com/pqq-bk/p/6933130.html
　简单工厂 ： 用来生产同一等级结构中的任意产品。（对于增加新的产品，无能为力）
  工厂方法 ：用来生产同一等级结构中的固定产品。（支持增加任意产品）　　
　抽象工厂 ：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）
好像确实是这样哎


java语言特性

动态代理与反射语言特色

数据类型：
byte shortint int long
char
boolean
double float

自动转换 
Integer的自动装箱拆箱 有缓存机制
自动装箱 valueOf 自动拆箱intValue

注意new 关键字一定会新建一个对象的

基本类型超过范围会出现编译错误。不像js似的。

对象引用：
https://bijian1013.iteye.com/blog/2288195
强引用：没有引用时 对象（在堆中）会被回收
软引用：内存空间不足时
弱引用：每次GC时
虚引用：随时
从上往下看 对象越来越容易被回收

异常处理机制
